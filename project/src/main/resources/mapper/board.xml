<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.project.mapper.BoardMapper">

<!--    DTO를 사용함으로 resultMap 사용 보류-->
    <resultMap type="UserDTO" id="UserDTO">
        <result column="user_seq" property="user_seq"/>
        <result column="email" property="email"/>
        <result column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="sigungu_cd" property="sigungu_cd"/>
    </resultMap>

    <resultMap type="ContentDTO" id="ContentDTO">
        <result column="review_seq" property="review_seq"/>
        <result column="title" property="title"/>
        <result column="view_count" property="view_count"/>
        <result column="star" property="star"/>
        <result column="img_1" property="img_1"/>
        <result column="created_at" property="created_at"/>
        <collection property="UserDTO" resultMap="UserDTO"/>
    </resultMap>

    <select id="getContentList" parameterType="RequestContentDTO" resultType="ContentDTO">
        select
        U.name,
        R.review_seq,
        R.title,
        R.view_count,
        R.star,
        R.img_1,
        R.created_at
        from
        user U join review R
        on U.user_seq = R.user_seq
        where R.title like CONCAT('%', #{keyword}, '%') OR R.content like CONCAT('%', #{keyword}, '%')
        ORDER BY R.review_seq DESC
        limit #{curPage}, #{cutPage}

    </select>

    <select id="getFollowContentList" parameterType="RequestContentDTO" resultType="ContentDTO">
        select
        U.name,
        R.review_seq,
        R.title,
        R.view_count,
        R.star,
        R.img_1,
        R.created_at
        from
        user U join review R
        on U.user_seq = R.user_seq
        JOIN Follower F
        ON U.user_seq = F.follower_user_seq
        where F.following_user_seq = #{user_seq}
        and R.title like CONCAT('%', #{keyword}, '%') OR R.content like CONCAT('%', #{keyword}, '%')
        ORDER BY R.review_seq DESC
        limit #{curPage}, #{cutPage}
    </select>


    <insert id="createTmpMarketList">
        create temporary table tmp_marketlist like market;
    </insert>
    <delete id="dropTmpMarketList">
        drop temporary table tmp_marketlist;
    </delete>
    <insert id="insertTmpMarketList" parameterType="java.util.List">
        insert into tmp_marketlist  (market_id,name,point_xy,phone_num,address_name,road_address_name,place_url)
        values
        <foreach collection="list" item="item" separator=",">
            (
            #{item.id},
            #{item.place_name},
            point(#{item.x},#{item.y}),
            #{item.phone},
            #{item.address_name},
            #{item.road_address_name},
            #{item.place_url}
            )
        </foreach>
    </insert>
    <insert id="upsertMarketList" parameterType="java.util.List">
        insert into market  (market_id,name,point_xy,phone_num,address_name,road_address_name,place_url)
        values
        <foreach collection="list" item="item" separator=",">
            (
            #{item.id},
            #{item.place_name},
            point(#{item.x},#{item.y}),
            #{item.phone},
            #{item.address_name},
            #{item.road_address_name},
            #{item.place_url}
            )
        </foreach>
        on duplicate key update
        name = values(name),
        phone_num = values(name),
        point_xy = values(point_xy),
        place_url = place_url,
        updated_at = now();
    </insert>

    <select id="getMarketAndReviewList" resultType="MarketReviewDTO">
        select
        M.name as market_name,
        M.market_id,
        M.address_name,
        ifnull(M.image_url,B.img_1) as market_img,
        B.user_seq as writer_seq,
        D.name as writer_name,
        count(B.review_seq) as review_count,
        avg(B.star) as star_avg,
        M.market_seq,
        ST_X(M.point_xy) as x,
        ST_Y(M.point_xy) as y,
        ST_DISTANCE_SPHERE(POINT(#{latitude},#{longitude}),M.point_xy) as distance
        from
        market M
        left join sigungu_cd SG ON M.sigungu_cd = SG.sigungu_cd
        left join sido_cd SD ON SG.sido_cd = SD.sido_cd
        left join review B ON M.market_seq = B.market_seq
        <if test="tags != null and tags.size() > 0">
             join review_tag RT ON B.review_seq = RT.review_seq AND
            <foreach item="id" index="index" collection="tags" open="(" separator=" or " close=")">
                RT.review_seq = #{id}
            </foreach>

        </if>
        left join follower A ON
        A.follower_user_seq = #{user_seq}
        AND
        A.following_user_seq = B.user_seq
        left join user D ON B.user_seq = D.user_seq
        left join market E ON B.market_seq = E.market_seq
        where
        MBRContains(
        ST_GeomFromText(CONCAT('POLYGON((',
        #{ha}, ' ', #{qa}, ',',
        #{oa}, ' ', #{qa}, ',',
        #{oa}, ' ', #{pa}, ',',
        #{ha}, ' ', #{pa}, ',',
        #{ha}, ' ', #{qa},
        '))'))
        ,M.point_xy) = 1
        <if test="query !=null and !query.equals('')">
            AND
            (
            SD.cd_name like CONCAT('%', #{query},'%')
            OR
            SG.gungu_name like CONCAT('%', #{query},'%')
            OR
            M.address_name like CONCAT('%', #{query},'%')
            OR
            M.name like CONCAT('%', #{query},'%')
            )
        </if>
        group by M.market_seq
        order by count(B.review_seq)
        -- ,distance
        limit 20
    </select>

    <select id="getTagList" resultType="TagDTO">
        select code,cd_name,use_yn from tag_cd where use_yn = 'Y'
    </select>

    <insert id="insertBoardWrite"  parameterType="BoardWriteDTO">
<!--        <selectKey>-->
<!--            <if test="market_seq == null or market_seq == 0">-->
<!--                select market_seq from market where name = #{name}-->
<!--            </if>-->
<!--        </selectKey>-->
        insert into review ( user_seq, market_seq, title, content, star, img_1, img_2, img_3, img_4, img_5 )
        values ( #{user_seq}, #{market_seq}, #{title}, #{content}, #{star}, #{img_1}, #{img_2}, #{img_3}, #{img_4}, #{img_5} )
    </insert >
    <insert id="fileinsert" parameterType="java.util.List">
        insert
        into image (originalFilename,storeFilename,boardFileorder) values
        <foreach collection="list" item="a" separator=" , ">
           (#{a.originalFilename},#{a.storeFilename},#{a.boardFileorder})
        </foreach>

    </insert>

    <select id="selectMarketSeq" resultType="BoardWriteDTO" parameterType="String">
        select market_seq from market
        where name = #{name}
    </select>

    <update id="updateBoardWrite" parameterType="BoardWriteDTO">
        update review
        set
        market_seq = #{market_seq},
        title = #{title},
        content = #{content},
        star = #{star},
        img_1 = #{img1},
        img_2 = #{img2},
        img_3 = #{img3},
        img_4 = #{img4},
        img_5 = #{img5}
        where review_seq = #{review_seq}
    </update>
    <delete id="deleteBoardWrite" parameterType="Long">
        delete from review where review_seq = #{review_seq}
    </delete>
</mapper>

